import Controller from '@ember/controller';
import { action } from '@ember/object';
import { tracked } from '@glimmer/tracking';
import { Pagination } from '@gavant/ember-pagination/hooks/pagination';
import { QueryParamsObj } from '@gavant/ember-pagination/utils/query-params';

import Customer from '../models/customer';
import moment from 'moment';

export default class List extends Controller {
    @tracked paginator!: Pagination<Customer>;
    @tracked paginatorTwo!: Pagination<Customer>;

    //filters
    @tracked foo = 123;
    @tracked bar = true;
    @tracked baz = null;
    @tracked mappedFilter = 'abc';
    @tracked date = moment();

    //sorts
    @tracked sorts = ['sortA', '-sortB'];
    @tracked sortsTwo = ['-sortC', 'sortD'];

    get totalPages() {
        return Math.ceil(this.paginator.models.length / 9);
    }

    get totalPagesTwo() {
        return Math.ceil(this.paginatorTwo.models.length / 9);
    }

    @action
    async customReload() {
        console.log('do something before reloading');
        await this.paginator.reloadModels();
        console.log('do something after reloading');
    }

    @action
    processQueryParams(params: QueryParamsObj) {
        //allows you to do some custom logic to modify/format
        //the query params anytime they are generated by the
        //paginator instance, before they are used in the api request
        if (!params.filter) {
            params.filter = {};
        }

        params.filter.randomInt = Math.floor(Math.random() * 1000) + 1;

        if (params.filter?.baz) {
            params.filter.baz = params.filter.baz.trim();
        }

        return params;
    }

    @action
    onChangeSorting(sorts: string[]) {
        this.sorts = sorts;
    }
}

// DO NOT DELETE: this is how TypeScript knows how to look up your controllers.
declare module '@ember/controller' {
    interface Registry {
        list: List;
    }
}
